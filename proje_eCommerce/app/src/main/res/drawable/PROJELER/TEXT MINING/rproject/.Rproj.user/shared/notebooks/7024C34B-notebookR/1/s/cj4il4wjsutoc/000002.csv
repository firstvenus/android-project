"0","#sentiment analysis"
"0","sentimentScore <- function(tweets, positive_words, negative_words, .progress='none')"
"0","{"
"0","  require(plyr)"
"0","  require(stringr)"
"0","  "
"0","  scores = laply(sentences, function(tweets, positive_words, negative_words) {"
"0","    "
"0","    # cleaning"
"0","    tweets = gsub('[[:punct:]]', '', tweets)"
"0","    tweets = gsub('[[:cntrl:]]', '', tweets)"
"0","    tweets = gsub('\\d+', '', tweets)"
"0","    # and convert to lower case:"
"0","    tweets = tolower(tweets)"
"0","    "
"0","    # split into words. str_split is in the stringr package"
"0","    word.list = str_split(tweets, '\\s+')"
"0","    # sometimes a list() is one level of hierarchy too much"
"0","    words = unlist(word.list)"
"0","    "
"0","    # compare our words to the dictionaries of positive & negative terms"
"0","    positive.matches = match(words, positive_words)"
"0","    negative.matches = match(words, negative_words)"
"0","    "
"0","    # match() returns the position of the matched term or NA"
"0","    # we just want a TRUE/FALSE:"
"0","    positive.matches = !is.na(positive.matches)"
"0","    negative.matches = !is.na(negative.matches)"
"0","    "
"0","    # and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():"
"0","    score = sum(positive.matches) - sum(negative.matches)"
"0","    "
"0","    return(score)"
"0","  }, positive_words, negative_words, .progress=.progress )"
"0","  "
"0","  scores.df = data.frame(score=scores, text=sentences)"
"0","  return(scores.df)"
"0","}"
